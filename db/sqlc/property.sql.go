// Code generated by sqlc. DO NOT EDIT.
// source: property.sql

package db

import (
	"context"
)

const createProperty = `-- name: CreateProperty :one
INSERT INTO properties (
  "name",
  "description",
  initial_block_count,
  remaining_block_count
) VALUES (
  $1, $2, $3, $4
) RETURNING id, name, description, initial_block_count, remaining_block_count, created_at, updated_at
`

type CreatePropertyParams struct {
	Name                string `json:"name"`
	Description         string `json:"description"`
	InitialBlockCount   int64  `json:"initial_block_count"`
	RemainingBlockCount int64  `json:"remaining_block_count"`
}

func (q *Queries) CreateProperty(ctx context.Context, arg CreatePropertyParams) (Property, error) {
	row := q.db.QueryRowContext(ctx, createProperty,
		arg.Name,
		arg.Description,
		arg.InitialBlockCount,
		arg.RemainingBlockCount,
	)
	var i Property
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.InitialBlockCount,
		&i.RemainingBlockCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProperty = `-- name: GetProperty :one
SELECT id, name, description, initial_block_count, remaining_block_count, created_at, updated_at FROM properties
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProperty(ctx context.Context, id int64) (Property, error) {
	row := q.db.QueryRowContext(ctx, getProperty, id)
	var i Property
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.InitialBlockCount,
		&i.RemainingBlockCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
