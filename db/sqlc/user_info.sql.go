// Code generated by sqlc. DO NOT EDIT.
// source: user_info.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUserInfo = `-- name: CreateUserInfo :one
INSERT INTO user_information (
  user_id,
  firstname,
  lastname,
  phone_number,
  nationality,
  address,
  postal_code,
  city,
  country
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING user_id, firstname, lastname, phone_number, nationality, address, postal_code, city, country
`

type CreateUserInfoParams struct {
	UserID      uuid.UUID `json:"user_id"`
	Firstname   string    `json:"firstname"`
	Lastname    string    `json:"lastname"`
	PhoneNumber string    `json:"phone_number"`
	Nationality string    `json:"nationality"`
	Address     string    `json:"address"`
	PostalCode  string    `json:"postal_code"`
	City        string    `json:"city"`
	Country     string    `json:"country"`
}

func (q *Queries) CreateUserInfo(ctx context.Context, arg CreateUserInfoParams) (UserInformation, error) {
	row := q.db.QueryRowContext(ctx, createUserInfo,
		arg.UserID,
		arg.Firstname,
		arg.Lastname,
		arg.PhoneNumber,
		arg.Nationality,
		arg.Address,
		arg.PostalCode,
		arg.City,
		arg.Country,
	)
	var i UserInformation
	err := row.Scan(
		&i.UserID,
		&i.Firstname,
		&i.Lastname,
		&i.PhoneNumber,
		&i.Nationality,
		&i.Address,
		&i.PostalCode,
		&i.City,
		&i.Country,
	)
	return i, err
}

const existsUserInfo = `-- name: ExistsUserInfo :one
SELECT EXISTS(
  SELECT 1 FROM user_information
  WHERE user_id = $1 LIMIT 1
)
`

func (q *Queries) ExistsUserInfo(ctx context.Context, userID uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, existsUserInfo, userID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getUserInfo = `-- name: GetUserInfo :one
SELECT user_id, firstname, lastname, phone_number, nationality, address, postal_code, city, country FROM user_information
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserInfo(ctx context.Context, userID uuid.UUID) (UserInformation, error) {
	row := q.db.QueryRowContext(ctx, getUserInfo, userID)
	var i UserInformation
	err := row.Scan(
		&i.UserID,
		&i.Firstname,
		&i.Lastname,
		&i.PhoneNumber,
		&i.Nationality,
		&i.Address,
		&i.PostalCode,
		&i.City,
		&i.Country,
	)
	return i, err
}
