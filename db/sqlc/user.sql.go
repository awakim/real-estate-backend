// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  hashed_password,
  nickname,
  email
) VALUES (
  $1, $2, $3
) RETURNING id, email, hashed_password, nickname, phone_number, password_changed_at, created_at, is_admin
`

type CreateUserParams struct {
	HashedPassword string `json:"hashed_password"`
	Nickname       string `json:"nickname"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.HashedPassword, arg.Nickname, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.Nickname,
		&i.PhoneNumber,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.IsAdmin,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, hashed_password, nickname, phone_number, password_changed_at, created_at, is_admin FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.Nickname,
		&i.PhoneNumber,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.IsAdmin,
	)
	return i, err
}
