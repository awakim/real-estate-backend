// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/awakim/immoblock-backend/identity/auth0 (interfaces: UserManagement)

// Package mockidentity is a generated GoMock package.
package mockidentity

import (
	reflect "reflect"

	management "github.com/auth0/go-auth0/management"
	gomock "github.com/golang/mock/gomock"
)

// MockUserManagement is a mock of UserManagement interface.
type MockUserManagement struct {
	ctrl     *gomock.Controller
	recorder *MockUserManagementMockRecorder
}

// MockUserManagementMockRecorder is the mock recorder for MockUserManagement.
type MockUserManagementMockRecorder struct {
	mock *MockUserManagement
}

// NewMockUserManagement creates a new mock instance.
func NewMockUserManagement(ctrl *gomock.Controller) *MockUserManagement {
	mock := &MockUserManagement{ctrl: ctrl}
	mock.recorder = &MockUserManagementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserManagement) EXPECT() *MockUserManagementMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserManagement) Create(arg0 *management.User, arg1 ...management.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserManagementMockRecorder) Create(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserManagement)(nil).Create), varargs...)
}
